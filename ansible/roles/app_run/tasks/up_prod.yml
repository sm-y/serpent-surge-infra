---
# roles/app_run/tasks/up_prod.yml
# This task is specific to the current build
- name: Load build_time from file
  set_fact:
    build_time: "{{ lookup('file', '/tmp/build_time.txt') }}"

- name: Remove existing frontend image with same tag
  shell: docker rmi -f {{ frontend_ecr_uri }}:{{ build_time }}
  ignore_errors: yes

- name: Remove existing backend image with same tag
  shell: docker rmi -f {{ backend_ecr_uri }}:{{ build_time }}
  ignore_errors: yes

- name: Copy image digests file to remote
  copy:
    src: /tmp/image_digests.yml
    dest: /tmp/image_digests.yml

- name: Load image digests
  include_vars:
    file: /tmp/image_digests.yml

- name: Include app_build deploy_env to create .env
  block:
    - include_role:
        name: app_build
        tasks_from: deploy_env

- name: Deploy docker-compose for prod
  template:
    src: docker-compose.prod.j2
    dest: /data/prod/docker-compose.yml
    mode: "0644"

- name: Check if docker-compose binary exists
  stat:
    path: /usr/local/bin/docker-compose
  register: docker_compose_bin

- name: Download docker-compose binary if missing
  get_url:
    url: https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64
    dest: /usr/local/bin/docker-compose
    mode: "0755"
  become: yes
  when: not docker_compose_bin.stat.exists

- name: Create docker-compose symlink for 'docker compose' command
  file:
    src: /usr/local/bin/docker-compose
    dest: /usr/local/bin/docker-compose-v2
    state: link
  become: yes

- name: Ensure ubuntu is in docker group
  user:
    name: ubuntu
    groups: docker
    append: yes
  become: yes

- name: Reset ssh connection to allow user changes to affect ansible user
  meta: reset_connection

- name: Stop existing containers (prod)
  shell: docker-compose -p prod -f /data/prod/docker-compose.yml down
  become: yes
  ignore_errors: yes

- name: Pause to ensure containers stopped
  pause:
    seconds: 5

- name: Login to AWS ECR
  shell: |
    aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin 510612307309.dkr.ecr.eu-north-1.amazonaws.com
  environment:
    AWS_DEFAULT_REGION: eu-north-1
    AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
    AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
  # delegate_to: "{{ prod_instance_ip }}"

- name: Check current user in remove images task
  shell: whoami
  become: yes

# Production
- name: Pull frontend image from ECR by digest
  community.docker.docker_image:
    name: "{{ frontend_ecr_uri }}@{{ frontend_image_digest }}"
    source: pull
    state: present

- name: Pull backend image from ECR by digest
  community.docker.docker_image:
    name: "{{ backend_ecr_uri }}@{{ backend_image_digest }}"
    source: pull
    state: present

- name: Force pull images with docker-compose
  shell: docker-compose -p prod -f /data/prod/docker-compose.yml pull
  become: yes

- name: Run containers with docker-compose (prod)
  shell: docker-compose -p prod -f /data/prod/docker-compose.yml up -d
  become: yes

- name: Show frontend image ID
  community.docker.docker_image_info:
    name: "{{ frontend_ecr_uri }}:latest"
  register: frontend_image_info

- name: Show backend image ID
  community.docker.docker_image_info:
    name: "{{ backend_ecr_uri }}:latest"
  register: backend_image_info

- debug:
    msg: "Backend image ID: {{ backend_image_info.images[0].Id }}"
  when: "'prod' in group_names and not ansible_check_mode and backend_image_info.images | length > 0"

- debug:
    msg: "Frontend image ID: {{ frontend_image_info.images[0].Id }}"
  when: "'prod' in group_names and not ansible_check_mode and frontend_image_info.images | length > 0"

# keep these commands as a fallback, but already add restart in docker-compose.dev.j2 services

- name: Ensure backend restarts unless stopped
  command: docker update --restart unless-stopped serpent-repo-backend
  become: yes

- name: Ensure frontend restarts unless stopped
  command: docker update --restart unless-stopped serpent-repo-frontend
  become: yes
